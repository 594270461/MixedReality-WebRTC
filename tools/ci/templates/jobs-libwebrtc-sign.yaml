# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See LICENSE in the project root for license information.

# [TEMPLATE] Sign WebRTC Core and create signed NuGet packages

parameters:
  jobName: ''
  nugetPackageType: ''    # libwebrtc|winrtwrappers|winrtheaders
  packageName: ''         # NuGet package ID, without version
  buildPlatform: ''       # Desktop|UWP
  buildArch: ''           # x86|x64|ARM|ARM64
  buildConfig: ''         # Debug|Release
  downloadPath: ''        # Path where to download artifacts inside the unsigned package
  artifactSignConfig: ''  # Optional sign config .xml file for files inside the NuGet package
  nugetSignConfig: ''     # Sign config .xml file for the NuGet package itself

jobs:

# Sign the files, create the NuGet, and sign it
- job: nuget_core_${{parameters.jobName}}
  timeoutInMinutes: 120
  pool:
    name: 'Package ES Lab E'
  variables:
    buildTriple: '${{parameters.buildPlatform}}.${{parameters.buildArch}}.${{parameters.buildConfig}}'
    nuspecFile: 'nuspec/Microsoft.MixedReality.WebRTC.Native.Core.${{parameters.buildPlatform}}.${{parameters.buildArch}}.${{parameters.buildConfig}}.nuspec'

  steps:
  - checkout: none
  
  - powershell: |
     Write-Host "Cleaning $(Build.BinariesDirectory)..."
     Get-ChildItem -Path "$(Build.BinariesDirectory)" -Force -Recurse | Sort-Object -Property FullName -Descending | Remove-Item -Recurse -Force
     
     Write-Host "Clear git insteadof"
     git config --local --unset url."git@github.com:".insteadOf
     git config --global --unset url."git@github.com:".insteadOf
     
     Write-Host "=== Git local config ===" + ("="*20)
     git config --local --list
     
     Write-Host "=== Git global config ===" + ("="*20)
     git config --global --list
     
    displayName: 'Prepare env'

  - powershell: |
      $Authorization = "Authorization: Basic " + [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('$(ScriptsRepoUser):$(ScriptsRepoPAT)'))
      git clone -c http.extraheader="$Authorization" -b master $(ScriptsRepoURL) $(Build.ArtifactStagingDirectory)/scripts
    displayName: "Checkout release scripts"
    
  - task: PowerShell@2
    displayName: 'Compute package versions'
    inputs:
      targetType: filePath
      filePath: $(Build.ArtifactStagingDirectory)/scripts/computePackageVersion.ps1
      arguments: '-SignConfigFile ${{parameters.nugetSignConfig}} -NuspecFile $(nuspecFile)'

  - task: PowerShell@2
    displayName: 'Download .targets files'
    inputs:
      targetType: filePath
      filePath: $(Build.ArtifactStagingDirectory)/scripts/downloadTargets.ps1
      arguments: '$(SourceBuildCommit) $(Build.BinariesDirectory)'
    env:
      GITHUB_USER: $(github.user)
      GITHUB_EMAIL: $(github.email)
      GITHUB_NAME: $(github.name)
      GITHUB_PAT: $(github.pat)

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 4.9.2'
    inputs:
      versionSpec: 4.9.2

  # Download artifacts built from first stage
  # This depends on the actual package being built

  # Microsoft.MixedReality.WebRTC.Native.Core.Desktop|UWP.*
  - ${{ if eq(variables['nugetPackageType'], 'libwebrtc') }}:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download libwebrtc_${{parameters.buildPlatform}}-${{parameters.buildArch}}-${{parameters.buildConfig}}'
      inputs:
        buildType: current
        artifactName: 'libwebrtc_${{parameters.buildPlatform}}-${{parameters.buildArch}}-${{parameters.buildConfig}}'
        targetPath: '$(Build.BinariesDirectory)/unsigned/${{parameters.packageName}}/lib/native/lib/${{parameters.downloadPath}}'

  # Microsoft.MixedReality.WebRTC.Native.Core.UWP
  - ${{ if eq(variables['nugetPackageType'], 'winrtheaders') }}:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download WinRT headers'
      inputs:
        buildType: current
        artifactName: 'orgwebrtc_headers'
        targetPath: '$(Build.BinariesDirectory)/unsigned/${{parameters.packageName}}/lib/native/include/wrapper'

  # Microsoft.MixedReality.WebRTC.Native.Core.WinRT.*
  - ${{ if eq(variables['nugetPackageType'], 'winrtwrappers') }}:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download orgwebrtc_UWP-${{parameters.buildArch}}-${{parameters.buildConfig}}'
      inputs:
        buildType: current
        artifactName: 'orgwebrtc_UWP-${{parameters.buildArch}}-${{parameters.buildConfig}}'
        targetPath: '$(Build.BinariesDirectory)/unsigned/${{parameters.packageName}}/${{parameters.downloadPath}}'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download orgwebrtc_glue_UWP-${{parameters.buildArch}}-${{parameters.buildConfig}}'
      inputs:
        buildType: current
        artifactName: 'orgwebrtc_glue_UWP-${{parameters.buildArch}}-${{parameters.buildConfig}}'
        targetPath: '$(Build.BinariesDirectory)/unsigned/${{parameters.packageName}}/${{parameters.downloadPath}}'

  # Print the content of the unsigned/ folder for debugging
  - powershell: |
     foreach ($f in $(Get-ChildItem -Path $(Build.BinariesDirectory)/unsigned -Recurse))
     {
       Write-Host $f.FullName
     }
    displayName: 'List unsigned content'

  # Copy as is to the signed/ output folder the input files which cannot be signed
  - task: PowerShell@2
    displayName: 'Copy files not being signed'
    inputs:
      targetType: filePath
      filePath: $(Build.ArtifactStagingDirectory)/scripts/copyUnsignedFiles.ps1
      arguments: '-PackageName "${{parameters.packageName}}"'
      ignoreLASTEXITCODE: true

  # Run Component Detection before signing for compliance
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection before signing'
    inputs:
      scanType: LogOnly
      sourceScanPath: '$(Build.BinariesDirectory)/unsigned'

  # Sign the files inside the NuGet package
  # This is conditional because some packages don't have any signed files
  - ${{ if ne(variables['artifactSignConfig'], '') }}:
    - task: PkgESCodeSign@10
      displayName: 'Package ES - CodeSign artifacts'
      inputs:
        signConfigXml: $(Build.ArtifactStagingDirectory)/scripts/${{parameters.artifactSignConfig}}
        inPathRoot: '$(Build.BinariesDirectory)/unsigned/${{parameters.packageName}}'
        outPathRoot: '$(Build.BinariesDirectory)/signed/${{parameters.packageName}}.$(NuGetVersion)'

  # Print the content of the signed/ folder for debugging
  - powershell: |
     foreach ($f in $(Get-ChildItem -Path $(Build.BinariesDirectory)/signed -Recurse))
     {
       Write-Host $f.FullName
     }
    displayName: 'List signed content'

  # Create the NuGet package
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2  # NuGetCommand@2
    displayName: 'NuGet pack Core'
    inputs:
      command: pack
      packagesToPack: $(nuspecFile)
      packDestination: '$(Build.ArtifactStagingDirectory)/unsigned'
      versioningScheme: byEnvVar
      versionEnvVar: NuGetVersion
      basePath: '$(Build.BinariesDirectory)/signed/${{parameters.packageName}}.$(NuGetVersion)'

  # Sign the NuGet package itself
  - task: PkgESCodeSign@10
    displayName: 'Package ES - CodeSign NuGet package'
    inputs:
      signConfigXml: $(Build.ArtifactStagingDirectory)/scripts/${{parameters.nugetSignConfig}}
      inPathRoot: '$(Build.ArtifactStagingDirectory)/unsigned'
      outPathRoot: '$(Build.ArtifactStagingDirectory)/signed'

  # Publish the signed NuGet package as a pipeline artifact for the final publish stage
  - task: PublishPipelineArtifact@1
    displayName: 'Publish nuget_core_${{parameters.jobName}}'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/signed'
      artifact: 'nuget_core_${{parameters.jobName}}'
