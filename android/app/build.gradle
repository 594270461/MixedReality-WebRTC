import java.nio.file.Files
import java.nio.file.Paths
import java.util.zip.ZipFile

apply plugin: 'com.android.library'

// Task to copy specific files out of libwebrtc.aar and into this project.
task copyWebRTCDependencies
tasks.whenTaskAdded { task ->
    if (task.name == 'externalNativeBuildRelease') {
        task.dependsOn copyWebRTCDependencies
    } else if (task.name == 'externalNativeBuildDebug') {
        task.dependsOn copyWebRTCDependencies
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "28.0.2"
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    defaultConfig {
        project.archivesBaseName = "Microsoft.MixedReality.WebRTC.Native"
        minSdkVersion 25
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "arm64-v8a"
        }
        packagingOptions {
            doNotStrip "*/arm64-v8a/*.so"
        }
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17 -DMRS_USE_STR_WRAPPER -DMR_SHARING_ANDROID -DWEBRTC_POSIX -DWEBRTC_ANDROID -DANDROID_STL=c++_shared"
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            jniDebuggable true
            debuggable true
        }
        release {
            minifyEnabled false
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    // WebRTC requires Java 8 features
    // https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/discuss-webrtc/V1h2uQMDCkA/RA-uzncVAAAJ
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path "./src/main/cpp/CMakeLists.txt"
        }
    }
}

dependencies {
    compileOnly project(':libwebrtc')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
}

copyWebRTCDependencies.doLast {
    // See BUILD.md for instructions to build libwebrtc.aar
    def aar = file('../libwebrtc/libwebrtc.aar')
    extractEntry(aar, 'jni/arm64-v8a/libjingle_peerconnection_so.so', "${projectDir}/src/main/jniLibs/arm64-v8a/libjingle_peerconnection_so.so")
    extractEntry(aar, 'classes.jar', "${projectDir}/src/main/libs/libwebrtc.jar")
}

// Utility method to extract only one entry in a zip file
private def extractEntry(archive, entryPath, outputPath) {
    if (!archive.exists()) {
        throw new GradleException("archive $archive not found")
    }
    def zip = new ZipFile(archive)
    zip.entries().each {
        if (it.name == entryPath) {
            def path = Paths.get(outputPath)
            if (!Files.exists(path)) {
                Files.createDirectories(path.getParent())
            } else {
                Files.delete(path)
            }
            println('copying to ' + path)
            Files.copy(zip.getInputStream(it), path)
        }
    }
    zip.close()
}
